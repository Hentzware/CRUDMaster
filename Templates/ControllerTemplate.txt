using SOLUTIONNAME.Domain.Interfaces.UPPERNAME;
using SOLUTIONNAME.Domain.Requests.UPPERNAME;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace SOLUTIONNAME.API.Controllers;

[Route("LOWERNAME")]
[ApiController]
public class UPPERNAMEController : ControllerBase
{
	private readonly IUPPERNAMEService _service;

	public UPPERNAMEController(IUPPERNAMEService service)
	{
		_service = service;
	}

	[Authorize(Roles = "Admin")]
	[HttpDelete("{id:guid}")]
	public async Task<IActionResult> Delete(Guid id)
	{
		var request = new DeleteUPPERNAMERequest() { Id = id };
		var result = await _service.DeleteAsync(request);

		return NoContent();
	}

	[Authorize(Roles = "Admin")]
	[HttpGet]
	public async Task<IActionResult> Get()
	{
		var result = await _service.GetAsync();

		return Ok(result);
	}

	[Authorize(Roles = "Admin")]
	[HttpGet("{id:guid}")]
	public async Task<IActionResult> GetById(Guid id)
	{
		var request = new GetUPPERNAMERequest() { Id = id };
		var result = await _service.GetAsync(request);

		return Ok(result);
	}

	[Authorize(Roles = "Admin")]
	[HttpPost]
	public async Task<IActionResult> Post(AddUPPERNAMERequest request)
	{
		var result = await _service.AddAsync(request);

		return CreatedAtAction(nameof(GetById), new { id = result.Id }, result);
	}

	[Authorize(Roles = "Admin")]
	[HttpPut("{id:guid}")]
	public async Task<IActionResult> Put(Guid id, EditUPPERNAMERequest request)
	{
		request.Id = id;

		var result = await _service.EditAsync(request);

		return Ok(result);
	}
}